# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: "Publish to Test PyPI instead of PyPI"
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  code-format:
    name: Code formatting and pre-commit validation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: --all-files

  basic-build:
    name: Basic build and test
    runs-on: ubuntu-latest
    needs: [code-format]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ubuntu-pip-3.10-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ubuntu-pip-3.10-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          pip install -e .[dev]

      - name: Test with pytest
        run: |
          pytest -v

      - name: Run linting
        run: |
          black --check --line-length=120 msgcenterpy tests
          isort --check-only msgcenterpy tests
          mypy msgcenterpy --disable-error-code=unused-ignore

  test-with-ros2:
    name: ROS2 integration test
    runs-on: ubuntu-latest
    needs: [basic-build]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          channels: conda-forge,robostack-staging,defaults
          channel-priority: strict
          activate-environment: ros2-test-env
          python-version: "3.11.11"
          auto-activate-base: false
          auto-update-conda: false
          show-channel-urls: true

      - name: Install ROS2 and dependencies
        shell: bash -l {0}
        run: |
          conda install -y \
            ros-humble-ros-core \
            ros-humble-std-msgs \
            ros-humble-geometry-msgs

      - name: Install package and run tests
        shell: bash -l {0}
        run: |
          pip install -e .[dev]
          python -c "import rclpy, rosidl_runtime_py; print('All ROS2 dependencies available')"
          pytest -v

  release-build:
    name: Build release distributions
    runs-on: ubuntu-latest
    needs: [test-with-ros2]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine check-manifest

      - name: Verify version consistency
        if: github.event_name == 'release'
        run: |
          VERSION=$(python -c "import msgcenterpy; print(msgcenterpy.__version__)" 2>/dev/null || echo "unknown")
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          if [ "$VERSION" != "$TAG_VERSION" ]; then
            echo "Version mismatch: package=$VERSION, tag=$TAG_VERSION"
            exit 1
          fi

      - name: Check manifest
        run: check-manifest

      - name: Build release distributions
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs:
      - release-build
    if: github.event_name == 'release' && !github.event.release.prerelease && github.event.inputs.test_pypi != 'true'
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Note: For enhanced security, consider configuring deployment environments
    # in your GitHub repository settings with protection rules

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  test-pypi-publish:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs:
      - release-build
    if: github.event.inputs.test_pypi == 'true' || (github.event_name == 'release' && github.event.release.prerelease)
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Note: For enhanced security, consider configuring deployment environments
    # in your GitHub repository settings with protection rules

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  create-github-release-assets:
    name: Add assets to GitHub release
    runs-on: ubuntu-latest
    needs: release-build
    if: github.event_name == 'release'

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-publish:
    name: Post-publish tasks
    runs-on: ubuntu-latest
    needs: [pypi-publish, test-pypi-publish]
    if: always() && (needs.pypi-publish.result == 'success' || needs.test-pypi-publish.result == 'success')

    steps:
      - uses: actions/checkout@v4

      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.pypi-publish.result }}" = "success" ]; then
            echo "| PyPI | Published |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-pypi-publish.result }}" = "success" ]; then
            echo "| Test PyPI | Published |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "| GitHub Release | Assets uploaded |" >> $GITHUB_STEP_SUMMARY
          echo "| Version | ${{ github.event.release.tag_name || 'test' }} |" >> $GITHUB_STEP_SUMMARY

      - name: Notify team
        run: |
          echo "Package published successfully!"
